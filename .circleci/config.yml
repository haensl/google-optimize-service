# https://circleci.com/docs/2.1/language-javascript/
version: 2.1
commands:
  extract-version:
    steps:
      - run:
          name: extract version
          working_directory: ~/google-optimize-service
          command: |
            VERSION=$(head -n1 CHANGELOG.md | grep -o '\([0-9]\+\.\)\{2\}[0-9]\+')
            echo "export VERSION=${VERSION}" >> $BASH_ENV
            echo "building version: ${VERSION}"
  setup:
    steps:
      - checkout
      - run:
          name: update npm
          command: sudo npm install -g npm@latest
      - restore_cache:
          keys:
            - google-optimize-service-dependencies-{{ checksum "package.json" }}
            - google-optimize-service-dependencies-
      - run:
          name: install dependencies
          command: npm install
      - save_cache:
          paths:
            - node_modules
          key: google-optimize-service-dependencies-{{ checksum "package.json" }}
      - extract-version

  create-test-project:
    steps:
      - run:
          working-directory: /tmp
          name: create test application
          command: |
            mkdir test-app
            cd test-app
            npm init -y

  bundle-test-setup:
    steps:
      - attach_workspace:
          at: ~/google-optimize-service
      - create-test-project
      - run:
          name: install module
          working-directory: /tmp/test-app
          command: |
            npm i -S ~/google-optimize-service

  package-test-setup:
    steps:
      - attach_workspace:
          at: ~/google-optimize-service
      - create-test-project
      - extract-version
      - run:
          name: install module
          working-directory: /tmp/test-app
          command: |
            npm i -S google-optimize-service@${VERSION}

workflows:
  version: 2
  default:
    when: always
    jobs:
      - lint
      - test
      - bundle:
          requires:
            - lint
            - test
      - bundle-test-node-js:
          requires:
            - bundle
      - bundle-test-esm-js:
          requires:
            - bundle
      - package-test-node-js:
          requires:
            - bundle
      - publish:
          requires:
            - bundle-test-esm-js
            - bundle-test-node-js
          filters:
            branches:
              only: master

jobs:
  lint:
    docker:
      - image: circleci/node:lts
    working_directory: ~/google-optimize-service
    steps:
      - setup
      - run:
          name: create test-results-folder
          command: mkdir -p test-results/eslint
      - run:
          name: lint
          command: npm run lint:ci
      - store_test_results:
          path: test-results

  test:
    docker:
      - image: circleci/node:lts
    working_directory: ~/google-optimize-service
    steps:
      - setup
      - run:
          name: unit tests
          command: npm run test:ci
      - store_test_results:
          path: test-results

  bundle:
    docker:
      - image: circleci/node:lts
    working_directory: ~/google-optimize-service
    steps:
      - setup
      - run:
          name: bundle
          environment:
            NODE_ENV: 'production'
          command: npm run build
      - store_artifacts:
          path: lib
      - persist_to_workspace:
          root: ./
          paths:
            - CHANGELOG.md
            - src
            - lib
            - README.md
            - LICENSE
            - package.json
            - package-lock.json
            - .npmignore

  bundle-test-node-js:
    docker:
      - image: circleci/node:lts
    working_directory: /tmp/test-app
    steps:
      - bundle-test-setup
      - run:
          name: test node.js module
          command: |
            cp ~/google-optimize-service/src/package-tests/node/node.test.js ./
            node node.test.js

  bundle-test-esm-js:
    docker:
      - image: circleci/node:lts
    working_directory: /tmp/test-app
    steps:
      - bundle-test-setup
      - run:
          name: copy test
          command: |
            cp ~/google-optimize-service/src/package-tests/esm/* ./
      - run:
          name: update npm
          command: sudo npm install -g npm@latest
      - restore_cache:
          keys:
            - google-optimize-service-esm-module-test-dependencies-{{ checksum "package.json" }}
            - google-optimize-service-esm-module-test-dependencies-
      - run:
          name: install dependencies
          command: npm install
      - run:
          name: install module
          command: |
            npm i -S ~/google-optimize-service
      - save_cache:
          paths:
            - node_modules
          key: google-optimize-service-esm-module-test-dependencies-{{ checksum "package.json" }}
      - run:
          name: test esm.js module
          command: |
            npm test
      - store_test_results:
          path: test-results

  publish:
    docker:
      - image: circleci/node:lts
    working_directory: ~/google-optimize-service
    steps:
      - attach_workspace:
          at: ~/google-optimize-service
      - run:
          name: update npm
          command: sudo npm install -g npm@latest
      - run:
          name: setup npm registry token
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run:
          name: publish node module
          command: npm publish

  package-test-node-js:
    docker:
      - image: circleci/node:lts
    working_directory: /tmp/test-app
    steps:
      - package-test-setup
      - run:
          name: test node.js module
          command: |
            cp ~/google-optimize-service/src/package-tests/node/node.test.js ./
            node node.test.js
      - run:
          name: install tree
          command: sudo apt-get -y install tree
      - run:
          name: gather bundle information
          command: tree -s node_modules/google-optimize-service > ./bundle.info
      - store_artifacts:
          path: bundle.info
